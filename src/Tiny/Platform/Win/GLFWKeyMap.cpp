#include "Tiny/Platform/Win/GLFWKeyMap.h"
#include "Tiny/Core/Service.h"
#include <unordered_map>
#include "GLFW/glfw3.h"

using namespace Tiny;
using namespace Tiny::Input;

static std::unordered_map<int, KEYBOARD> keyboardMap = {
	{GLFW_KEY_A, KEYBOARD::KEY_A},
	{GLFW_KEY_B, KEYBOARD::KEY_B},
	{GLFW_KEY_C, KEYBOARD::KEY_C},
	{GLFW_KEY_D, KEYBOARD::KEY_D},
	{GLFW_KEY_E, KEYBOARD::KEY_E},
	{GLFW_KEY_F, KEYBOARD::KEY_F},
	{GLFW_KEY_G, KEYBOARD::KEY_G},
	{GLFW_KEY_H, KEYBOARD::KEY_H},
	{GLFW_KEY_I, KEYBOARD::KEY_I},
	{GLFW_KEY_J, KEYBOARD::KEY_J},
	{GLFW_KEY_K, KEYBOARD::KEY_K},
	{GLFW_KEY_L, KEYBOARD::KEY_L},
	{GLFW_KEY_M, KEYBOARD::KEY_M},
	{GLFW_KEY_N, KEYBOARD::KEY_N},
	{GLFW_KEY_O, KEYBOARD::KEY_O},
	{GLFW_KEY_P, KEYBOARD::KEY_P},
	{GLFW_KEY_Q, KEYBOARD::KEY_Q},
	{GLFW_KEY_R, KEYBOARD::KEY_R},
	{GLFW_KEY_S, KEYBOARD::KEY_S},
	{GLFW_KEY_T, KEYBOARD::KEY_T},
	{GLFW_KEY_U, KEYBOARD::KEY_U},
	{GLFW_KEY_V, KEYBOARD::KEY_V},
	{GLFW_KEY_W, KEYBOARD::KEY_W},
	{GLFW_KEY_X, KEYBOARD::KEY_X},
	{GLFW_KEY_Y, KEYBOARD::KEY_Y},
	{GLFW_KEY_Z, KEYBOARD::KEY_Z},

	{GLFW_KEY_F1, KEYBOARD::F1},
	{GLFW_KEY_F2, KEYBOARD::F2},
	{GLFW_KEY_F3, KEYBOARD::F3},
	{GLFW_KEY_F4, KEYBOARD::F4},
	{GLFW_KEY_F5, KEYBOARD::F5},
	{GLFW_KEY_F6, KEYBOARD::F6},
	{GLFW_KEY_F7, KEYBOARD::F7},
	{GLFW_KEY_F8, KEYBOARD::F8},
	{GLFW_KEY_F9, KEYBOARD::F9},
	{GLFW_KEY_F10, KEYBOARD::F10},
	{GLFW_KEY_F11, KEYBOARD::F11},
	{GLFW_KEY_F12, KEYBOARD::F12},

	{GLFW_KEY_0, KEYBOARD::KEY_0},
	{GLFW_KEY_1, KEYBOARD::KEY_1},
	{GLFW_KEY_2, KEYBOARD::KEY_2},
	{GLFW_KEY_3, KEYBOARD::KEY_3},
	{GLFW_KEY_4, KEYBOARD::KEY_4},
	{GLFW_KEY_5, KEYBOARD::KEY_5},
	{GLFW_KEY_6, KEYBOARD::KEY_6},
	{GLFW_KEY_7, KEYBOARD::KEY_7},
	{GLFW_KEY_8, KEYBOARD::KEY_8},
	{GLFW_KEY_9, KEYBOARD::KEY_9},

	{GLFW_KEY_ESCAPE, KEYBOARD::ESC},
	{GLFW_KEY_TAB, KEYBOARD::TAB},
	{GLFW_KEY_CAPS_LOCK, KEYBOARD::CAPSLOCK},
	{GLFW_KEY_LEFT_SHIFT, KEYBOARD::LEFTSHIFT},
	{GLFW_KEY_LEFT_CONTROL, KEYBOARD::LEFTCTRL},
	{GLFW_KEY_LEFT_ALT, KEYBOARD::LEFTALT},
	{GLFW_KEY_RIGHT_SHIFT, KEYBOARD::RIGHTSHIFT},
	{GLFW_KEY_RIGHT_CONTROL,KEYBOARD::RIGHTSHIFT},
	{GLFW_KEY_RIGHT_ALT,KEYBOARD::RIGHTCONTROL},
	{GLFW_KEY_BACKSPACE, KEYBOARD::RIGHTALT},
	{GLFW_KEY_ENTER, KEYBOARD::ENTER},
	{GLFW_KEY_LEFT_BRACKET, KEYBOARD::LEFTBRACKET},
	{GLFW_KEY_RIGHT_BRACKET, KEYBOARD::RIGHTBRACKET},
	{GLFW_KEY_SEMICOLON, KEYBOARD::SEMICOLON},
	{GLFW_KEY_APOSTROPHE, KEYBOARD::APOSTROPHE},
	{GLFW_KEY_COMMA, KEYBOARD::COMMA},
	{GLFW_KEY_PERIOD, KEYBOARD::PERIOD},
	{GLFW_KEY_SLASH, KEYBOARD::SLASH},
	{GLFW_KEY_BACKSLASH, KEYBOARD::BACKSLASH},
	{GLFW_KEY_SPACE, KEYBOARD::SPACE},

	{GLFW_KEY_RIGHT, KEYBOARD::RIGHT},
	{GLFW_KEY_LEFT, KEYBOARD::LEFT},
	{GLFW_KEY_DOWN, KEYBOARD::DOWN},
	{GLFW_KEY_UP, KEYBOARD::UP},
};

static std::unordered_map<int, MOUSEBTN> mouseMap = {
	{GLFW_MOUSE_BUTTON_LEFT, MOUSEBTN::MOUSE_LEFT_BTN},
	{GLFW_MOUSE_BUTTON_RIGHT, MOUSEBTN::MOUSE_RIGHT_BTN},
	{GLFW_MOUSE_BUTTON_MIDDLE, MOUSEBTN::MOUSE_MIDDLE_BTN},
};

KEYBOARD GLFWKey2TinyKey(int glfwKey){
	auto iter = keyboardMap.find(glfwKey);
	if (iter != keyboardMap.end())
		return iter->second;


	Service::Log().E("Invalid glfw Key:{}", glfwKey);

	return KEYBOARD::INVALID;
}

MOUSEBTN GLFWMouse2TinyMouse(int glfwMouse){
	auto iter = mouseMap.find(glfwMouse);
	if (iter != mouseMap.end())
		return iter->second;

	Service::Log().E("");

	return MOUSEBTN::INVALID;
}
